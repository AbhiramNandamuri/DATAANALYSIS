# -*- coding: utf-8 -*-
"""DT & BT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PlOS4l-zrfgvswnoc3AH7UUAdyxWjfO0
"""

import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import export_graphviz,plot_tree
from IPython.display import Image

df = pd.read_csv('/content/drive/MyDrive/demoDT.csv',sep=",")
print(df)

feature_cols =['Literacy',' Cleanliness',' Crime_Rate']
feature=df[feature_cols]
Target=df.Good

#create decision tree classifier object
DT=DecisionTreeClassifier()
#train decision tree classifier
DT=DT.fit(feature,Target)

#predict the response for test dataset
l=int(input("enter literacy:"))
c1=int(input("enter cleanliness:"))
cr=int(input("enter crimerate: "))
pred=DT.predict([[l,c1,cr]])
if pred==1:
  print("Good State")
else:
  print("Bad State")

plot_tree(DT) #

#load libraries
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier

df=pd.read_csv('/content/drive/MyDrive/demoDT.csv',sep=',')

feature_cols=['Literacy',' Cleanliness',' Crime_Rate']
feature=df[feature_cols]#features
Target=df.Good  #Target variable

RF=RandomForestClassifier(n_estimators=10)
RF.fit(feature,Target)

#predict the response for test dataset
l=int(input("enter Literacy:"))
cl=int(input("enter Cleanliness:"))
cr=int(input("enter Crimerate: "))
pred=DT.predict([[1,cl,cr]])
if pred==1:
  print("Good State")
else:
  print("BadÂ State")

#saving all the decision trees
import os
output_dir="tree_visualizations"
os.makedirs(output_dir,exist_ok=True)

RF.estimators_ #model name=RF